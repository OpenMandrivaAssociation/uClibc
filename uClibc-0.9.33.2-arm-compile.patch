--- uClibc-0.9.33.3/ldso/ldso/arm/aeabi_read_tp.S.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/ldso/ldso/arm/aeabi_read_tp.S	2014-02-18 19:50:23.130576936 +0100
@@ -38,6 +38,7 @@
 #ifdef __UCLIBC_HAS_THREADS_NATIVE__
 
 #include <sysdep.h>
+.arm
 
 /* GCC will emit calls to this routine under -mtp=soft.  Linux has an
    equivalent helper function (which clobbers fewer registers than
--- uClibc-0.9.33.3/libc/string/arm/_memcpy.S.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libc/string/arm/_memcpy.S	2014-02-18 19:50:23.129576936 +0100
@@ -41,6 +41,9 @@
 #include <endian.h>
 #include <bits/arm_asm.h>
 
+.thumb
+.syntax unified
+
 #if !defined(THUMB1_ONLY)
 /*
  * This is one fun bit of code ...
--- uClibc-0.9.33.3/libc/string/arm/memset.S.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libc/string/arm/memset.S	2014-02-18 19:50:23.130576936 +0100
@@ -21,6 +21,8 @@
 #include <sys/syscall.h>
 #include <bits/arm_asm.h>
 
+.thumb
+.syntax unified
 .text
 .global memset
 .type memset,%function
--- uClibc-0.9.33.3/libc/sysdeps/linux/arm/bits/arm_asm.h.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libc/sysdeps/linux/arm/bits/arm_asm.h	2014-02-18 19:50:23.130576936 +0100
@@ -3,8 +3,10 @@
 #define _ARM_ASM_H
 
 #ifdef __thumb2__
+#ifdef __ASSEMBLER__
 .thumb
 .syntax unified
+#endif
 #define IT(t, cond) i##t cond
 #else
 /* XXX: This can be removed if/when we require an assembler that supports
--- uClibc-0.9.33.3/libc/sysdeps/linux/arm/clone.S.armasm~	2014-02-18 19:50:23.130576936 +0100
+++ uClibc-0.9.33.3/libc/sysdeps/linux/arm/clone.S	2014-02-18 19:51:44.679573597 +0100
@@ -111,6 +111,7 @@ __clone:
 	ldr	r4, [sp, #12]
 	DO_CALL (clone)
 	movs	a1, a1
+	IT(t, ne)
 	ldmnefd	sp!, {r4}
 	blt	__error
 	IT(t, ne)
--- uClibc-0.9.33.3/libc/sysdeps/linux/arm/sysdep.h.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libc/sysdeps/linux/arm/sysdep.h	2014-02-18 19:50:23.130576936 +0100
@@ -113,6 +113,7 @@
 
 #undef	PSEUDO
 #define	PSEUDO(name, syscall_name, args)				\
+  .arm;									\
   .text;								\
   ENTRY (name);								\
     DO_CALL (syscall_name, args);					\
--- uClibc-0.9.33.3/libc/sysdeps/linux/arm/vfork.S.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libc/sysdeps/linux/arm/vfork.S	2014-02-18 19:50:23.130576936 +0100
@@ -12,6 +12,8 @@
 #include <bits/errno.h>
 #include <sys/syscall.h>
 
+.arm
+
 #ifndef SAVE_PID
 #define SAVE_PID
 #endif
--- uClibc-0.9.33.3/libpthread/nptl/sysdeps/arm/pthread_spin_lock.S.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libpthread/nptl/sysdeps/arm/pthread_spin_lock.S	2014-02-18 19:50:23.131576936 +0100
@@ -20,6 +20,7 @@
 
 	.text
 	.align	4
+	.arm
 
 ENTRY (pthread_spin_lock)
 	mov	r1, #1
--- uClibc-0.9.33.3/libpthread/nptl/sysdeps/arm/pthread_spin_trylock.S.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libpthread/nptl/sysdeps/arm/pthread_spin_trylock.S	2014-02-18 19:50:23.131576936 +0100
@@ -21,6 +21,7 @@
 
 #include <sysdep.h>
 
+	.arm
 	.text
 	.align	4
 
--- uClibc-0.9.33.3/libpthread/nptl/sysdeps/unix/sysv/linux/arm/sysdep-cancel.h.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libpthread/nptl/sysdeps/unix/sysv/linux/arm/sysdep-cancel.h	2014-02-18 19:50:23.131576936 +0100
@@ -31,6 +31,7 @@
 
 # undef PSEUDO
 # define PSEUDO(name, syscall_name, args)				\
+  .arm;									\
   .section ".text";							\
     PSEUDO_PROLOGUE;							\
   .type __##syscall_name##_nocancel,%function;				\
--- uClibc-0.9.33.3/libpthread/nptl/sysdeps/unix/sysv/linux/close.S.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libpthread/nptl/sysdeps/unix/sysv/linux/close.S	2014-02-18 19:50:23.130576936 +0100
@@ -1,5 +1,9 @@
 #include <sysdep-cancel.h>
 
+#ifdef __arm__
+.arm
+#endif
+
 /*
 extern int __close_nocancel (int) attribute_hidden;
 */
--- uClibc-0.9.33.3/libpthread/nptl/sysdeps/unix/sysv/linux/open.S.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libpthread/nptl/sysdeps/unix/sysv/linux/open.S	2014-02-18 19:50:23.130576936 +0100
@@ -1,5 +1,9 @@
 #include <sysdep-cancel.h>
 
+#ifdef __arm__
+.arm
+#endif
+
 /*
 extern int __open_nocancel (const char *, int, ...) attribute_hidden;
 */
--- uClibc-0.9.33.3/libubacktrace/arm/backtrace.c.armasm~	2013-05-28 09:31:58.000000000 +0200
+++ uClibc-0.9.33.3/libubacktrace/arm/backtrace.c	2014-02-18 19:50:23.130576936 +0100
@@ -67,7 +67,7 @@ backtrace_helper (struct _Unwind_Context
 {
 	struct trace_arg *arg = a;
 
-	assert (unwind_getip != NULL);
+	assert (unwind_getgr != NULL);
 
 	/* We are first called with address in the __backtrace function. Skip it. */
 	if (arg->cnt != -1)
