--- uClibc-0.9.33.3/include/unistd.h.syncfs~	2015-06-24 18:38:40.538836411 +0200
+++ uClibc-0.9.33.3/include/unistd.h	2015-06-24 18:38:43.618831241 +0200
@@ -1007,6 +1007,11 @@ extern char *getpass (__const char *__pr
 extern int fsync (int __fd);
 #endif /* Use BSD || X/Open.  */
 
+#ifdef __USE_GNU
+/* Make all changes done to all files on the file system associated
+   with FD actually appear on disk.  */
+extern int syncfs (int __fd) __THROW;
+#endif
 
 #if defined __USE_BSD || defined __USE_XOPEN_EXTENDED
 
--- uClibc-0.9.33.3/libc/sysdeps/linux/common/Makefile.in.syncfs~	2015-06-24 18:38:40.538836411 +0200
+++ uClibc-0.9.33.3/libc/sysdeps/linux/common/Makefile.in	2015-06-24 18:38:43.618831241 +0200
@@ -52,6 +52,7 @@ CSRC-$(UCLIBC_LINUX_SPECIFIC) += \
 	splice.c \
 	swapoff.c \
 	swapon.c \
+	syncfs.c \
 	sync_file_range.c \
 	sysctl.c \
 	sysinfo.c \
@@ -84,7 +85,7 @@ CSRC-$(UCLIBC_BSD_SPECIFIC) += mincore.c
 CSRC-$(UCLIBC_NTP_LEGACY) += ntp_gettime.c
 # aio_cancel|aio_error|aio_fsync|aio_read|aio_return|aio_suspend|aio_write|clock_getres|clock_gettime|clock_settime|clock_settime|fdatasync|lio_listio|mlockall|munlockall|mlock|munlock|mq_close|mq_getattr|mq_notify|mq_open|mq_receive|mq_timedreceive|mq_send|mq_timedsend|mq_setattr|mq_unlink|nanosleep|sched_getparam|sched_get_priority_max|sched_get_priority_min|sched_getscheduler|sched_rr_get_interval|sched_setparam|sched_setscheduler|sem_close|sem_destroy|sem_getvalue|sem_init|sem_open|sem_post|sem_trywait|sem_wait|sem_unlink|sem_wait|shm_open|shm_unlink|sigqueue|sigtimedwait|sigwaitinfo|sigwaitinfo|timer_create|timer_delete|timer_getoverrun|timer_gettime|timer_settime
 CSRC-$(UCLIBC_HAS_REALTIME) += clock_getres.c clock_gettime.c clock_settime.c \
-	fdatasync.c mlockall.c mlock.c munlockall.c munlock.c \
+	fdatasync.c syncfs.c mlockall.c mlock.c munlockall.c munlock.c \
 	nanosleep.c __rt_sigtimedwait.c __rt_sigwaitinfo.c sched_getparam.c \
 	sched_get_priority_max.c sched_get_priority_min.c sched_getscheduler.c \
 	sched_rr_get_interval.c sched_setparam.c sched_setscheduler.c sigqueue.c
--- uClibc-0.9.33.3/libc/sysdeps/linux/common/syncfs.c.syncfs~	2015-06-24 18:38:43.618831241 +0200
+++ uClibc-0.9.33.3/libc/sysdeps/linux/common/syncfs.c	2015-06-24 18:58:53.760281308 +0200
@@ -0,0 +1,29 @@
+/* vi: set sw=4 ts=4: */
+
+#include <sys/syscall.h>
+#include <unistd.h>
+
+#ifdef __UCLIBC_HAS_THREADS_NATIVE__
+#include "sysdep-cancel.h"
+#else
+#define SINGLE_THREAD_P 1
+#endif
+
+#define __NR___syscall_syncfs __NR_syncfs
+static inline _syscall1(int, __syscall_syncfs, int, fd)
+
+extern __typeof(syncfs) __libc_syncfs;
+
+int __libc_syncfs(int fd)
+{
+	if (SINGLE_THREAD_P)
+		return __syscall_syncfs(fd);
+
+#ifdef __UCLIBC_HAS_THREADS_NATIVE__
+	int oldtype = LIBC_CANCEL_ASYNC ();
+	int result = __syscall_syncfs(fd);
+	LIBC_CANCEL_RESET (oldtype);
+	return result;
+#endif
+}
+weak_alias(__libc_syncfs, syncfs)
